Primitive variable: A variable which holds a primitive value.
    int a =30;
    // a is primitive variable
    // int is type of value
    // 30 is value

Reference variable: A variable which holds reference/address of an object.
    e.g. Product product = new Product();
        // product : reference variable which holds address of an object of type Product
        // new Product():  this is object of type of Product
        // Product: it is type which specifies the type of object

- class:
    - it is keyword which is used to create a class/ category/ group
    - it is derived from the word classification.
    - class is a blueprint/ template, structure, layout, plan, design, derived data type to create an object
    - Why do we need? to create objects
    - How to create class: class ClassName {}
    - With single class we can create any no. of objects.

    class contains
        - state/attributes/variables/properties/data/info/columns/fields/
        - behaviour/methods/functions/procedure/routine/implementation/

- Object:
    - it is an instance of class.
    - instance is an any memory space allocated.
    - Object is a memory space allocated for the class type data.
    - Why do need an object? to store data.
    - How to create an object?
        - syntax: ClassName referenceVariableName = new ClassName();
        - Product product = new Product(); // RHS is an object

#Variable:
    #. Based on the value:
        1. Primitive variable
        2. Reference variable

    #. based on the memory it occupies
        1. Local variable
            ---> Variables which are created inside the method,method parameter, constructor or blocks,
            --> Stack memory
            - Local variable will get the memory when the method, block, constructor is called.
            1. Local Primitive variable
            2. Local Reference variable
        2. Instance Variable [ object specific]
            --> Variables which are created at class level outside
                all methods, constructors,blocks
                without static keyword are called as instance variables.
            --> Heap Memory area
            1. Instance Primitive variable
            2. Instance Reference variable
            - instance variables are used to store object specific data.
            - instance variable will get the memory every time we create an object.
            How to access instance variables?
            Ans. We need a reference to access the heap memory area.
            e.g. Product p = new Product();
                    p.productId, p.productName

        3. Static variables
             -- class or method memory area
            --> Variables which are created at class level outside
                  all methods, constructors,blocks
                     with static keyword are called as static variables.
            1. static Primitive variable
            2. static Reference variable
        - static variables are used to store common data for all objects.
        - static is used share data across all objects.
        - static variable gets the memory only once at the time class loading.
        - How to access static variables?
            By using className.
            ClassName.staticVarName

class components
    - variables
        - reference
        - primitive
        - final
        - local
        - instance
        - static
    - methods/functions/procedure/routine/behaviour/implementation/task
        What is it?
            - It is a group of statements which are enclosed inside the {}.
            - It has a name also.
            - Method can accept input via method parameters
            - Method can return output also via return statement.
        Why to use?
            - to achieve code reusability
            - we can apply access specifiers so we can secure the code.
       How to use?
            syntax: accessSpecifier returnType methodName(method params){
                //statements
                // optional return
            }
            public static void main(String[] multipleStrings){
                //statements
            }
       - Types of methods
        - instance methods :
            - are object specific
            - How to access: by using reference since it belongs to object

            - e.g. float getBalance(){
                    return balance;
                }
                Account ac = new Account();
                ac.getBalance();

        - static methods :
            - common for all
            - by using className we access it.

            e.g. static void print(Object obj){
                    SOP(obj);
                    }

                    Account.print(null);


        - default methods
        - abstract methods
        - final methods
    - constructors
        - default
        - zero param
        - param
    - this keyword
    - blocks
        - instance
        - static
    - nested class
        - static nested class
        - non-static i.e. inner class
        - local inner class
        - anonymous class
OOPS
    - Access specifiers
    - Encapsulation
    - Inheritance
        - what is it
        - why to use
        - how it uses
        - types
        - super keyword
    - Polymorphism
        - method overloading
        - method overriding
    - Abstraction
        - concrete methods
        - concrete class
        - abstract method
        - interfaces
            - marker
            - functional
            - lambda expression
